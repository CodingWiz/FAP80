vram_size		.equ	2400
vram_char_base_addr	.equ	0x8000
vram_attri_base_addr	.equ	0x8960
vram_copy_ctrl_addr	.equ	0x92c1
cursor_max_x		.equ	79
cursor_x_size		.equ	80
cursor_max_y		.equ	29
text_upper_limit	.equ	1
text_lower_limit	.equ	26

	org	0x400

;	A IS ALWAYS DESTORIED

;	c: character
;	d: cursor y
;	e: cursor x
;	destories: none
putc_nolock:
	ld	a, c
	cp	10
	jp	z, put_c_newline
	cp	13
	jp	z, putc_done
	push	hl
	push	bc
	call	row_lookup
	ld	h, b
	ld	l, c		; hl holds look up result
	push	de		; save de
	ld 	d, 0		; clear d
	add	hl, de		; now hl holds the proper address
	ld	bc, vram_char_base_addr
	add	hl, bc		; now hl holds proper vram address
	pop	de
	pop 	bc
	ld	(hl), c
	call	cursor_advance
	pop	hl
	jp	putc_done
put_c_newline:
	ld	e, 0
	inc	d
putc_done:
	call	scroll_check
	ret

;	destories: none
enable_vram_copy:
	push	hl
	ld	hl, vram_copy_ctrl_addr
	ld	(hl), 0xff
	pop	hl
	ret

;	destories: none
disable_vram_copy:
	push	hl
	ld	hl, vram_copy_ctrl_addr
	ld	(hl), 0x0
	pop	hl
	ret

;	d: cursor y
;	e: cursor x
;	destories: none
cursor_advance:
	ld	a, e
	cp	cursor_max_x
	jp	c, no_newline
	ld	e, 255
	inc	d
no_newline:
	inc	e
	ret

;	check the current cursor position to see if it needs scrolling
;	d: cursor y
;	destories: none
scroll_check:
	ld	a, text_lower_limit
	cp	d
	jp	nz, scroll_check_done
	push	bc
	ld	b, text_upper_limit
	ld	c, text_lower_limit
	call	screen_scroll
	dec	d
	ld	e, 0
	pop	bc
scroll_check_done:
	ret

;	print 0 terminated string
;	hl: buf start
;	d: cursor y
;	e: cursor x
;	destories: bc?
puts:
	call	disable_vram_copy
	ld	c, (hl)
	ld	a, c
	or	a
	jp	z, puts_done
	call	putc_nolock
	inc	hl
	jp	puts
puts_done:
	call	enable_vram_copy
	ret

;	d: lookup value
;	destories: bc
;	return: lookup result in bc
row_lookup:
	push	hl
	push	de
	ld	a, d		; load y cursor into a
	add	a, a		; multiply y cursor by 2
	ld	h, 0
	ld	l, a		; load 2a into hl
	ld	bc, cursor_lookup	; load lookup table address into bc
	add	hl, bc 		; add y cursor to lookup offset. now (hl) is lsb of look up, (hl+1) msb
	ld	c, (hl)		; load high byte of lookup result into c
	inc	hl
	ld	b, (hl)		; load low byte of lookup result into b, now bc holds cursor y look up result
	pop	de
	pop	hl
	ret

;	scroll 1 line up
;	b: starting line
;	c: ending line
;	destories: none
screen_scroll:
	push	bc
	push 	de
	push	hl

	call	disable_vram_copy
	; ----- look up how many bytes to copy -----
	push	bc
	ld	a, c
	sub	b
	ld	d, a
	call	row_lookup		; bc has the result
	ld	(temp_var0), bc		; save cope size to temp_var0
	pop	bc

	; ----- calculate starting vram address -----
	push	bc
	ld	d, b
	call	row_lookup
	ld	hl, vram_char_base_addr
	add	hl, bc			; hl holds starting vram address
	ld	(temp_var1), hl		; save it to temp_var1
	ld	b, 0
	ld	c, cursor_x_size
	add	hl, bc

	; ----- start copying -----
	ld	bc, (temp_var0)
	ld	de, (temp_var1)
	ldir
	pop	bc

	; ----- clear new line -----
	ld	d, c
	call	row_lookup
	ld	hl, vram_char_base_addr
	add	hl, bc			; hl holds end vram address
	ld	a, cursor_x_size
	ld	c, '.'
screen_scroll_loop:
	ld	(hl), c
	inc	hl
	dec	a
	jp	nz, screen_scroll_loop

	pop	hl
	pop	de
	pop	bc
	call	enable_vram_copy
	ret

;	destories: none
clear_screen:
	push	bc
	push 	de
	push	hl

	ld	de, vram_size
	ld	c, ' ' ; character
	call	disable_vram_copy
cclear:	
	ld	hl, vram_char_base_addr
	add	hl, de
	ld	(hl), c
	dec 	de
	ld	a, d
	or 	e	
	jp	nz, cclear

	call	enable_vram_copy
	pop	bc
	pop 	de
	pop	hl
	ret

;	destories: none
clear_attri:
	push	bc
	push 	de
	push	hl

	ld	de, vram_size
	ld	c, 0x34 ; attribute
	call	disable_vram_copy
aclear:	
	ld	hl, vram_attri_base_addr
	add	hl, de
	ld	(hl), c
	dec 	de
	ld	a, d
	or 	e	
	jp	nz, aclear

	call	enable_vram_copy
	pop	bc
	pop 	de
	pop	hl
	ret

cursor_lookup:
	.dw	0x0
	.dw	0x50
	.dw	0xa0
	.dw	0xf0
	.dw	0x140
	.dw	0x190
	.dw	0x1e0
	.dw	0x230
	.dw	0x280
	.dw	0x2d0
	.dw	0x320
	.dw	0x370
	.dw	0x3c0
	.dw	0x410
	.dw	0x460
	.dw	0x4b0
	.dw	0x500
	.dw	0x550
	.dw	0x5a0
	.dw	0x5f0
	.dw	0x640
	.dw	0x690
	.dw	0x6e0
	.dw	0x730
	.dw	0x780
	.dw	0x7d0
	.dw	0x820
	.dw	0x870
	.dw	0x8c0
	.dw	0x910

boot_message:
	.db "      //////////   ///     /////////   ////////   /////// ", 10
	.db "     ///        /// ///   ///    /// ///    /// ///   /// ", 10
	.db "    ///       ///   ///  ///    /// ///    /// ///   ///  ", 10
	.db "   //////// /////////// /////////   ////////  ///   ///   ", 10
	.db "  ///      ///     /// ///        ///    /// ///   ///    ", 10
	.db " ///      ///     /// ///        ///    /// ///   ///     ", 10
	.db "///      ///     /// ///         ////////   ///////", 0

credit:
	.db "dekuNukem 2016", 0
; 	.db "      ::::::::::   :::     :::::::::   ::::::::   ::::::: ", 10
; 	.db "     :+:        :+: :+:   :+:    :+: :+:    :+: :+:   :+: ", 10
; 	.db "    +:+       +:+   +:+  +:+    +:+ +:+    +:+ +:+   +:+  ", 10
; 	.db "   :#::+::# +#++:++#++: +#++:++#+   +#++:++#  +#+   +:+   ", 10
; 	.db "  +#+      +#+     +#+ +#+        +#+    +#+ +#+   +#+    ", 10
; 	.db " #+#      #+#     #+# #+#        #+#    #+# #+#   #+#     ", 10
; 	.db "###      ###     ### ###         ########   #######       ", 0
; 	.db "    _/_/_/_/    _/_/    _/_/_/      _/_/      _/    ", 10
; 	.db "   _/        _/    _/  _/    _/  _/    _/  _/  _/   ", 10
; 	.db "  _/_/_/    _/_/_/_/  _/_/_/      _/_/    _/  _/    ", 10
; 	.db " _/        _/    _/  _/        _/    _/  _/  _/     ", 10
; 	.db "_/        _/    _/  _/          _/_/      _/  ", 0

; 	.db "8888888888     d8888 8888888b.   .d8888b.   .d8888b.  ", 10
; 	.db "888           d88888 888   Y88b d88P  Y88b d88P  Y88b ", 10
; 	.db "888          d88P888 888    888 Y88b. d88P 888    888 ", 10
; 	.db "8888888     d88P 888 888   d88P  'Y88888'  888    888 ", 10
; 	.db "888        d88P  888 8888888P'  .d8P''Y8b. 888    888 ", 10
; 	.db "888       d88P   888 888        888    888 888    888 ", 10
; 	.db "888      d8888888888 888        Y88b  d88P Y88b  d88P ", 10
; 	.db "888     d88P     888 888         'Y8888P'   'Y8888P'  ", 0

; 	.db " ________ ________  ________  ________  ________     ", 10
; 	.db "|\  _____\\   __  \|\   __  \|\   __  \|\   __  \    ", 10
; 	.db "\ \  \__/\ \  \|\  \ \  \|\  \ \  \|\  \ \  \|\  \   ", 10
; 	.db " \ \   __\\ \   __  \ \   ____\ \   __  \ \  \\\  \  ", 10
; 	.db "  \ \  \_| \ \  \ \  \ \  \___|\ \  \|\  \ \  \\\  \ ", 10
; 	.db "   \ \__\   \ \__\ \__\ \__\    \ \_______\ \_______\", 10
; 	.db "    \|__|    \|__|\|__|\|__|     \|_______|\|_______|", 0
temp_var0:
	.dw	0
temp_var1:
	.dw	0
temp_var2:
	.dw	0
temp_var3:
	.dw	0


