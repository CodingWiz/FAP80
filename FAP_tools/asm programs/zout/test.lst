   1:					include 	helpers.z80
**** helpers.z80 ****
   1:     -	0960          	vram_size		.equ	2400
   2:     -	8000          	vram_char_base_addr	.equ	0x8000
   3:     -	8960          	vram_attri_base_addr	.equ	0x8960
   4:     -	92C1          	vram_copy_ctrl_addr	.equ	0x92c1
   5:     -	004F          	cursor_max_x		.equ	79
   6:     -	0050          	cursor_x_size		.equ	80
   7:     -	0001          	text_upper_limit	.equ	1
   8:     -	001A          	text_lower_limit	.equ	26
   9:				
  10:     -	0400          		org	0x400
  11:				
  12:				;	A IS ALWAYS DESTORIED
  13:				
  14:				;	c: character
  15:				;	d: cursor y
  16:				;	e: cursor x
  17:				;	destories: none
  18:     -	0400          	putc_nolock:
  19:    0+4	0400  79      		ld	a, c
  20:    4+7	0401  FE0A    		cp	10
  21:   11+10	0403  CA2404  		jp	z, put_c_newline
  22:   21+7	0406  FE0D    		cp	13
  23:   28+10	0408  CA2704  		jp	z, putc_done
  24:   38+11	040B  E5      		push	hl
  25:   49+11	040C  C5      		push	bc
  26:   60+17	040D  CD6D04  		call	row_lookup
  27:   77+4	0410  60      		ld	h, b
  28:   81+4	0411  69      		ld	l, c		; hl holds look up result
  29:   85+11	0412  D5      		push	de		; save de
  30:   96+7	0413  1600    		ld 	d, 0		; clear d
  31:  103+11	0415  19      		add	hl, de		; now hl holds the proper address
  32:  114+10	0416  010080  		ld	bc, vram_char_base_addr
  33:  124+11	0419  09      		add	hl, bc		; now hl holds proper vram address
  34:  135+10	041A  D1      		pop	de
  35:  145+10	041B  C1      		pop 	bc
  36:  155+7	041C  71      		ld	(hl), c
  37:  162+17	041D  CD3B04  		call	cursor_advance
  38:  179+10	0420  E1      		pop	hl
  39:  189+10	0421  C32704  		jp	putc_done
  40:     -	0424          	put_c_newline:
  41:  199+7	0424  1E00    		ld	e, 0
  42:  206+4	0426  14      		inc	d
  43:     -	0427          	putc_done:
  44:  210+17	0427  CD4604  		call	scroll_check
  45:  227+10	042A  C9      		ret
  46:				
  47:				;	destories: none
  48:     -	042B          	enable_vram_copy:
  49:  237+11	042B  E5      		push	hl
  50:  248+10	042C  21C192  		ld	hl, vram_copy_ctrl_addr
  51:  258+10	042F  36FF    		ld	(hl), 0xff
  52:  268+10	0431  E1      		pop	hl
  53:  278+10	0432  C9      		ret
  54:				
  55:				;	destories: none
  56:     -	0433          	disable_vram_copy:
  57:  288+11	0433  E5      		push	hl
  58:  299+10	0434  21C192  		ld	hl, vram_copy_ctrl_addr
  59:  309+10	0437  3600    		ld	(hl), 0x0
  60:  319+10	0439  E1      		pop	hl
  61:  329+10	043A  C9      		ret
  62:				
  63:				;	d: cursor y
  64:				;	e: cursor x
  65:				;	destories: none
  66:     -	043B          	cursor_advance:
  67:  339+4	043B  7B      		ld	a, e
  68:  343+7	043C  FE4F    		cp	cursor_max_x
  69:  350+10	043E  DA4404  		jp	c, no_newline
  70:  360+7	0441  1EFF    		ld	e, 255
  71:  367+4	0443  14      		inc	d
  72:     -	0444          	no_newline:
  73:  371+4	0444  1C      		inc	e
  74:  375+10	0445  C9      		ret
  75:				
  76:				;	check the current cursor position to see if it needs scrolling
  77:				;	d: cursor y
  78:				;	destories: none
  79:     -	0446          	scroll_check:
  80:  385+7	0446  3E1A    		ld	a, text_lower_limit
  81:  392+4	0448  BA      		cp	d
  82:  396+10	0449  C25804  		jp	nz, scroll_check_done
  83:  406+11	044C  C5      		push	bc
  84:  417+7	044D  0601    		ld	b, text_upper_limit
  85:  424+7	044F  0E1A    		ld	c, text_lower_limit
  86:  431+17	0451  CD7E04  		call	screen_scroll
  87:  448+4	0454  15      		dec	d
  88:  452+7	0455  1E00    		ld	e, 0
  89:  459+10	0457  C1      		pop	bc
  90:     -	0458          	scroll_check_done:
  91:  469+10	0458  C9      		ret
  92:				
  93:				;	print 0 terminated string
  94:				;	hl: buf start
  95:				;	d: cursor y
  96:				;	e: cursor x
  97:				;	destories: bc?
  98:     -	0459          	puts:
  99:  479+17	0459  CD3304  		call	disable_vram_copy
 100:  496+7	045C  4E      		ld	c, (hl)
 101:  503+4	045D  79      		ld	a, c
 102:  507+4	045E  B7      		or	a
 103:  511+10	045F  CA6904  		jp	z, puts_done
 104:  521+17	0462  CD0004  		call	putc_nolock
 105:  538+6	0465  23      		inc	hl
 106:  544+10	0466  C35904  		jp	puts
 107:     -	0469          	puts_done:
 108:  554+17	0469  CD2B04  		call	enable_vram_copy
 109:  571+10	046C  C9      		ret
 110:				
 111:				;	d: lookup value
 112:				;	destories: bc
 113:				;	return: lookup result in bc
 114:     -	046D          	row_lookup:
 115:  581+11	046D  E5      		push	hl
 116:  592+11	046E  D5      		push	de
 117:  603+4	046F  7A      		ld	a, d		; load y cursor into a
 118:  607+4	0470  87      		add	a, a		; multiply y cursor by 2
 119:  611+7	0471  2600    		ld	h, 0
 120:  618+4	0473  6F      		ld	l, a		; load 2a into hl
 121:  622+10	0474  01FF04  		ld	bc, cursor_lookup	; load lookup table address into bc
 122:  632+11	0477  09      		add	hl, bc 		; add y cursor to lookup offset. now (hl) is lsb of look up, (hl+1) msb
 123:  643+7	0478  4E      		ld	c, (hl)		; load high byte of lookup result into c
 124:  650+6	0479  23      		inc	hl
 125:  656+7	047A  46      		ld	b, (hl)		; load low byte of lookup result into b, now bc holds cursor y look up result
 126:  663+10	047B  D1      		pop	de
 127:  673+10	047C  E1      		pop	hl
 128:  683+10	047D  C9      		ret
 129:				
 130:				;	scroll 1 line up
 131:				;	b: starting line
 132:				;	c: ending line
 133:				;	destories: none
 134:     -	047E          	screen_scroll:
 135:  693+11	047E  C5      		push	bc
 136:  704+11	047F  D5      		push 	de
 137:  715+11	0480  E5      		push	hl
 138:				
 139:  726+17	0481  CD3304  		call	disable_vram_copy
 140:					; ----- look up how many bytes to copy -----
 141:  743+11	0484  C5      		push	bc
 142:  754+4	0485  79      		ld	a, c
 143:  758+4	0486  90      		sub	b
 144:  762+4	0487  57      		ld	d, a
 145:  766+17	0488  CD6D04  		call	row_lookup		; bc has the result
 146:  783+20	048B  ED43AD05		ld	(temp_var0), bc		; save cope size to temp_var0
 147:  803+10	048F  C1      		pop	bc
 148:				
 149:					; ----- calculate starting vram address -----
 150:  813+11	0490  C5      		push	bc
 151:  824+4	0491  50      		ld	d, b
 152:  828+17	0492  CD6D04  		call	row_lookup
 153:  845+10	0495  210080  		ld	hl, vram_char_base_addr
 154:  855+11	0498  09      		add	hl, bc			; hl holds starting vram address
 155:  866+16	0499  22AF05  		ld	(temp_var1), hl		; save it to temp_var1
 156:  882+7	049C  0600    		ld	b, 0
 157:  889+7	049E  0E50    		ld	c, cursor_x_size
 158:  896+11	04A0  09      		add	hl, bc
 159:				
 160:					; ----- start copying -----
 161:  907+20	04A1  ED4BAD05		ld	bc, (temp_var0)
 162:  927+20	04A5  ED5BAF05		ld	de, (temp_var1)
 163:  947+16+5	04A9  EDB0    		ldir
 164:  963+10	04AB  C1      		pop	bc
 165:				
 166:					; ----- clear new line -----
 167:  973+4	04AC  51      		ld	d, c
 168:  977+17	04AD  CD6D04  		call	row_lookup
 169:  994+10	04B0  210080  		ld	hl, vram_char_base_addr
 170: 1004+11	04B3  09      		add	hl, bc			; hl holds end vram address
 171: 1015+7	04B4  3E50    		ld	a, cursor_x_size
 172: 1022+7	04B6  0E2E    		ld	c, '.'
 173:     -	04B8          	screen_scroll_loop:
 174: 1029+7	04B8  71      		ld	(hl), c
 175: 1036+6	04B9  23      		inc	hl
 176: 1042+4	04BA  3D      		dec	a
 177: 1046+10	04BB  C2B804  		jp	nz, screen_scroll_loop
 178:				
 179: 1056+10	04BE  E1      		pop	hl
 180: 1066+10	04BF  D1      		pop	de
 181: 1076+10	04C0  C1      		pop	bc
 182: 1086+17	04C1  CD2B04  		call	enable_vram_copy
 183: 1103+10	04C4  C9      		ret
 184:				
 185:				;	destories: none
 186:     -	04C5          	clear_screen:
 187: 1113+11	04C5  C5      		push	bc
 188: 1124+11	04C6  D5      		push 	de
 189: 1135+11	04C7  E5      		push	hl
 190:				
 191: 1146+10	04C8  116009  		ld	de, vram_size
 192: 1156+7	04CB  0E2E    		ld	c, '.' ; character
 193: 1163+17	04CD  CD3304  		call	disable_vram_copy
 194:     -	04D0          	cclear:	
 195: 1180+10	04D0  210080  		ld	hl, vram_char_base_addr
 196: 1190+11	04D3  19      		add	hl, de
 197: 1201+7	04D4  71      		ld	(hl), c
 198: 1208+6	04D5  1B      		dec 	de
 199: 1214+4	04D6  7A      		ld	a, d
 200: 1218+4	04D7  B3      		or 	e	
 201: 1222+10	04D8  C2D004  		jp	nz, cclear
 202:				
 203: 1232+17	04DB  CD2B04  		call	enable_vram_copy
 204: 1249+10	04DE  C1      		pop	bc
 205: 1259+10	04DF  D1      		pop 	de
 206: 1269+10	04E0  E1      		pop	hl
 207: 1279+10	04E1  C9      		ret
 208:				
 209:				;	destories: none
 210:     -	04E2          	clear_attri:
 211: 1289+11	04E2  C5      		push	bc
 212: 1300+11	04E3  D5      		push 	de
 213: 1311+11	04E4  E5      		push	hl
 214:				
 215: 1322+10	04E5  116009  		ld	de, vram_size
 216: 1332+7	04E8  0E34    		ld	c, 0x34 ; attribute
 217: 1339+17	04EA  CD3304  		call	disable_vram_copy
 218:     -	04ED          	aclear:	
 219: 1356+10	04ED  216089  		ld	hl, vram_attri_base_addr
 220: 1366+11	04F0  19      		add	hl, de
 221: 1377+7	04F1  71      		ld	(hl), c
 222: 1384+6	04F2  1B      		dec 	de
 223: 1390+4	04F3  7A      		ld	a, d
 224: 1394+4	04F4  B3      		or 	e	
 225: 1398+10	04F5  C2ED04  		jp	nz, aclear
 226:				
 227: 1408+17	04F8  CD2B04  		call	enable_vram_copy
 228: 1425+10	04FB  C1      		pop	bc
 229: 1435+10	04FC  D1      		pop 	de
 230: 1445+10	04FD  E1      		pop	hl
 231: 1455+10	04FE  C9      		ret
 232:				
 233:     -	04FF          	cursor_lookup:
 234:     -	04FF  0000    		.dw	0x0
 235:     -	0501  5000    		.dw	0x50
 236:     -	0503  A000    		.dw	0xa0
 237:     -	0505  F000    		.dw	0xf0
 238:     -	0507  4001    		.dw	0x140
 239:     -	0509  9001    		.dw	0x190
 240:     -	050B  E001    		.dw	0x1e0
 241:     -	050D  3002    		.dw	0x230
 242:     -	050F  8002    		.dw	0x280
 243:     -	0511  D002    		.dw	0x2d0
 244:     -	0513  2003    		.dw	0x320
 245:     -	0515  7003    		.dw	0x370
 246:     -	0517  C003    		.dw	0x3c0
 247:     -	0519  1004    		.dw	0x410
 248:     -	051B  6004    		.dw	0x460
 249:     -	051D  B004    		.dw	0x4b0
 250:     -	051F  0005    		.dw	0x500
 251:     -	0521  5005    		.dw	0x550
 252:     -	0523  A005    		.dw	0x5a0
 253:     -	0525  F005    		.dw	0x5f0
 254:     -	0527  4006    		.dw	0x640
 255:     -	0529  9006    		.dw	0x690
 256:     -	052B  E006    		.dw	0x6e0
 257:     -	052D  3007    		.dw	0x730
 258:     -	052F  8007    		.dw	0x780
 259:     -	0531  D007    		.dw	0x7d0
 260:     -	0533  2008    		.dw	0x820
 261:     -	0535  7008    		.dw	0x870
 262:     -	0537  C008    		.dw	0x8c0
 263:     -	0539  1009    		.dw	0x910
 264:				
 265:     -	053B          	boot_message:
 266:     -	053B  68656C6C		.DB "hello world hello FAP, this is a super long message so I hope everything still works after printing all these out", 0
	      6F20776F
	      726C6420
	      68656C6C
	      6F204641
	      502C2074
	      68697320
	      69732061
	      20737570
	      6572206C
	      6F6E6720
	      6D657373
	      61676520
	      736F2049
	      20686F70
	      65206576
	      65727974
	      68696E67
	      20737469
	      6C6C2077
	      6F726B73
	      20616674
	      65722070
	      72696E74
	      696E6720
	      616C6C20
	      74686573
	      65206F75
	      7400
 267:				
 268:     -	05AD          	temp_var0:
 269:     -	05AD  0000    		.dw	0
 270:     -	05AF          	temp_var1:
 271:     -	05AF  0000    		.dw	0
 272:     -	05B1          	temp_var2:
 273:     -	05B1  0000    		.dw	0
 274:     -	05B3          	temp_var3:
 275:     -	05B3  0000    		.dw	0
 276:				
 277:				
**** test.z80 ****
   2:				
   3:     -	0000          		org	0x0	
   4: 1465+10	0000  C30001  		jp	program_start
   5:				
   6:     -	0080          		org	0x80
   7:     -	0080  0010    		.dw	0x1000
   8:				
   9:     -	0100          		org	0x100
  10:     -	0100          	program_start:
  11: 1475+4	0100  F3      		di
  12: 1479+10	0101  31FFFF  		ld	sp, 0xffff
  13:				
  14: 1489+17	0104  CDE204  		call	clear_attri
  15: 1506+17	0107  CDC504  		call	clear_screen
  16:				
  17: 1523+10	010A  213B05  		ld	hl, boot_message
  18: 1533+7	010D  1605    		ld	d, 5
  19: 1540+7	010F  1E05    		ld	e, 5
  20: 1547+17	0111  CD5904  		call	puts
  21:				
  22: 1564+7	0114  3E00    		ld	a, 0
  23: 1571+9	0116  ED47    		ld	i, a		; load interrupt register
  24: 1580+8	0118  ED5E    		im	2
  25: 1588+4	011A  FB      		ei
  26:				
  27:     -	011B          	end:	
  28: 1592+10	011B  C31B01  		jp	end
  29:				
  30:     -	1000          		org	0x1000
  31:     -	1000          	kb_isr:
  32: 1602+11	1000  DB01    		in	a, (1)
  33: 1613+4	1002  4F      		ld	c, a
  34: 1617+17	1003  CD3304  		call	disable_vram_copy
  35: 1634+17	1006  CD0004  		call	putc_nolock
  36: 1651+17	1009  CD2B04  		call	enable_vram_copy
  37: 1668+4	100C  FB      		ei
**** test.z80 ****
  38: 1672+14	100D  ED4D    		reti



Statistics:

     4	passes
     0	jr promotions
    35	symbols
   487	bytes



Symbol Table:

aclear           4ed     
boot_message     53b     
cclear           4d0     
clear_attri      4e2     
clear_screen     4c5     
cursor_advance   43b     
cursor_lookup    4ff     
cursor_max_x   =  4f     
cursor_x_size  =  50     
disable_vram_copy  433     
enable_vram_copy  42b     
end              11b     
kb_isr          1000     
no_newline       444     
program_start    100     
put_c_newline    424     
putc_done        427     
putc_nolock      400     
puts             459     
puts_done        469     
row_lookup       46d     
screen_scroll    47e     
screen_scroll_loop  4b8     
scroll_check     446     
scroll_check_done  458     
temp_var0        5ad     
temp_var1        5af     
temp_var2        5b1     
temp_var3        5b3     
text_lower_limit=  1a     
text_upper_limit=   1     
vram_attri_base_addr=8960     
vram_char_base_addr=8000     
vram_copy_ctrl_addr=92c1     
vram_size      = 960     
